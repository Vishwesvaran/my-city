package com.example.hotels.Model;



import java.util.Arrays;
import java.util.Date;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

@Entity
@Table(name = "room_image")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class RoomImage {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long imageId;  // Unique identifier for the image

    @Lob  // Store the image as a large object (BLOB)
    private byte[] imageData;  // The binary data of the image

    @ManyToOne
    @JoinColumn(name = "room_id", nullable = false)
     @ToString.Exclude
    private Room room;  // Foreign key linking the image to a specific room

    @Temporal(TemporalType.TIMESTAMP)
    private Date createdAt;  // Timestamp when the image was uploaded

    @Temporal(TemporalType.TIMESTAMP)
    private Date updatedAt;  // Timestamp when the image was last updated

    @Override
    public String toString() {
        return "RoomImage [imageId=" + imageId + ", imageData=" + Arrays.toString(imageData) + ", room=" + room
                + ", createdAt=" + createdAt + ", updatedAt=" + updatedAt + "]";
    }

    // Getters and Setters are automatically generated by Lombok annotations (@Data)

    @Transient
private String imageBase64;

public String getImageBase64() {
    return imageBase64;
}

public void setImageBase64(String imageBase64) {
    this.imageBase64 = imageBase64;
}

// Getter for image data (if you need to access the image bytes directly)
public byte[] getRoomImage() {
    return this.imageData;
}

}

